// third-party
import { createSlice } from '@reduxjs/toolkit';

// project imports
import axios from 'utils/axios';
import { dispatch } from 'app/store';

// ----------------------------------------------------------------------

const initialState = {
    error: null,
    projects: [],
    project: null,
    loading: false,
    showProjectsList: false
};

const projectSlice = createSlice({
    name: 'project',
    initialState,
    reducers: {
        // HAS ERROR
        hasError(state, action) {
            state.error = action.payload;
        },

        // ALL PRODUCTS
        fetchProjects(state, action) {
            state.projects = action.payload.items;
        },
        // SINGLE PRODUCT SELECT
        setSingleProjectSelectSuccess(state, action) {
            state.product = action.payload;
        },

        // SINGLE PRODUCT DISELECT
        setSingleProjectDiselectSuccess(state) {
            state.product = null;
        },
        // HEADER LIST TOGGLE
        toggleShowProjectsList(state) {
            state.showProjectsList = !state.showProjectsList;
        },
        // RESET CART

        loadingCotrl(state, action) {
            state.loading = action.payload;
        }
    }
});
export default projectSlice.reducer;

export const { toggleShowProjectsList } = projectSlice.actions;

export function setSingleProjectSelectSuccess(data = {}) {
    return () => {
        dispatch(projectSlice.actions.setSingleProjectSelectSuccess({ ...data }));
    };
}

// export function toggleShowProjects() {
//     return () => {
//         dispatch(projectSlice.actions.toggleShowProjectsList());
//     };
// }

// ----------------------------------------------------------------------
export function getProducts(userId, token) {
    return async () => {
        try {
            dispatch(projectSlice.actions.loadingCotrl(true));
            const response = await axios.get(`projects/${userId}`, {
                headers: {
                    Authorization: `Bearer ${token}`
                }
            });

            dispatch(projectSlice.actions.fetchProjects(response.data));
        } catch (error) {
            dispatch(projectSlice.actions.hasError(error));
        } finally {
            dispatch(projectSlice.actions.loadingCotrl(false));
        }
    };
}

// dispatch(projectSlice.actions.hasError(error));
